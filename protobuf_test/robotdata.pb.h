// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robotdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robotdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robotdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robotdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robotdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace robot_data {
class LaserData;
struct LaserDataDefaultTypeInternal;
extern LaserDataDefaultTypeInternal _LaserData_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RobotData;
struct RobotDataDefaultTypeInternal;
extern RobotDataDefaultTypeInternal _RobotData_default_instance_;
class RobotPath;
struct RobotPathDefaultTypeInternal;
extern RobotPathDefaultTypeInternal _RobotPath_default_instance_;
}  // namespace robot_data
PROTOBUF_NAMESPACE_OPEN
template<> ::robot_data::LaserData* Arena::CreateMaybeMessage<::robot_data::LaserData>(Arena*);
template<> ::robot_data::Point* Arena::CreateMaybeMessage<::robot_data::Point>(Arena*);
template<> ::robot_data::RobotData* Arena::CreateMaybeMessage<::robot_data::RobotData>(Arena*);
template<> ::robot_data::RobotPath* Arena::CreateMaybeMessage<::robot_data::RobotPath>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace robot_data {

// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:robot_data.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return new Point();
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_data.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double theta = 3;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // @@protoc_insertion_point(class_scope:robot_data.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robotdata_2eproto;
};
// -------------------------------------------------------------------

class LaserData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:robot_data.LaserData) */ {
 public:
  inline LaserData() : LaserData(nullptr) {}
  ~LaserData() override;
  explicit constexpr LaserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaserData(const LaserData& from);
  LaserData(LaserData&& from) noexcept
    : LaserData() {
    *this = ::std::move(from);
  }

  inline LaserData& operator=(const LaserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserData& operator=(LaserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LaserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaserData* internal_default_instance() {
    return reinterpret_cast<const LaserData*>(
               &_LaserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LaserData& a, LaserData& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserData* New() const final {
    return new LaserData();
  }

  LaserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LaserData& from);
  void MergeFrom(const LaserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LaserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_data.LaserData";
  }
  protected:
  explicit LaserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanFieldNumber = 3,
    kTimeStampFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // repeated .robot_data.Point scan = 3;
  int scan_size() const;
  private:
  int _internal_scan_size() const;
  public:
  void clear_scan();
  ::robot_data::Point* mutable_scan(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >*
      mutable_scan();
  private:
  const ::robot_data::Point& _internal_scan(int index) const;
  ::robot_data::Point* _internal_add_scan();
  public:
  const ::robot_data::Point& scan(int index) const;
  ::robot_data::Point* add_scan();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >&
      scan() const;

  // int64 timeStamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:robot_data.LaserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point > scan_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robotdata_2eproto;
};
// -------------------------------------------------------------------

class RobotPath final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:robot_data.RobotPath) */ {
 public:
  inline RobotPath() : RobotPath(nullptr) {}
  ~RobotPath() override;
  explicit constexpr RobotPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotPath(const RobotPath& from);
  RobotPath(RobotPath&& from) noexcept
    : RobotPath() {
    *this = ::std::move(from);
  }

  inline RobotPath& operator=(const RobotPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotPath& operator=(RobotPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RobotPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotPath* internal_default_instance() {
    return reinterpret_cast<const RobotPath*>(
               &_RobotPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotPath& a, RobotPath& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotPath* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotPath* New() const final {
    return new RobotPath();
  }

  RobotPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotPath>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RobotPath& from);
  void MergeFrom(const RobotPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RobotPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_data.RobotPath";
  }
  protected:
  explicit RobotPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 3,
    kTimeStampFieldNumber = 2,
    kLocationFieldNumber = 1,
  };
  // repeated .robot_data.Point path = 3;
  int path_size() const;
  private:
  int _internal_path_size() const;
  public:
  void clear_path();
  ::robot_data::Point* mutable_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >*
      mutable_path();
  private:
  const ::robot_data::Point& _internal_path(int index) const;
  ::robot_data::Point* _internal_add_path();
  public:
  const ::robot_data::Point& path(int index) const;
  ::robot_data::Point* add_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >&
      path() const;

  // int64 timeStamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 location = 1;
  void clear_location();
  ::PROTOBUF_NAMESPACE_ID::int32 location() const;
  void set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_location() const;
  void _internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:robot_data.RobotPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point > path_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robotdata_2eproto;
};
// -------------------------------------------------------------------

class RobotData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:robot_data.RobotData) */ {
 public:
  inline RobotData() : RobotData(nullptr) {}
  ~RobotData() override;
  explicit constexpr RobotData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotData(const RobotData& from);
  RobotData(RobotData&& from) noexcept
    : RobotData() {
    *this = ::std::move(from);
  }

  inline RobotData& operator=(const RobotData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotData& operator=(RobotData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RobotData& default_instance() {
    return *internal_default_instance();
  }
  enum ItemCase {
    kLaserData = 1,
    kRobotPath = 2,
    ITEM_NOT_SET = 0,
  };

  static inline const RobotData* internal_default_instance() {
    return reinterpret_cast<const RobotData*>(
               &_RobotData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RobotData& a, RobotData& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotData* New() const final {
    return new RobotData();
  }

  RobotData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RobotData& from);
  void MergeFrom(const RobotData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RobotData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_data.RobotData";
  }
  protected:
  explicit RobotData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaserDataFieldNumber = 1,
    kRobotPathFieldNumber = 2,
  };
  // .robot_data.LaserData laser_data = 1;
  bool has_laser_data() const;
  private:
  bool _internal_has_laser_data() const;
  public:
  void clear_laser_data();
  const ::robot_data::LaserData& laser_data() const;
  PROTOBUF_MUST_USE_RESULT ::robot_data::LaserData* release_laser_data();
  ::robot_data::LaserData* mutable_laser_data();
  void set_allocated_laser_data(::robot_data::LaserData* laser_data);
  private:
  const ::robot_data::LaserData& _internal_laser_data() const;
  ::robot_data::LaserData* _internal_mutable_laser_data();
  public:
  void unsafe_arena_set_allocated_laser_data(
      ::robot_data::LaserData* laser_data);
  ::robot_data::LaserData* unsafe_arena_release_laser_data();

  // .robot_data.RobotPath robot_path = 2;
  bool has_robot_path() const;
  private:
  bool _internal_has_robot_path() const;
  public:
  void clear_robot_path();
  const ::robot_data::RobotPath& robot_path() const;
  PROTOBUF_MUST_USE_RESULT ::robot_data::RobotPath* release_robot_path();
  ::robot_data::RobotPath* mutable_robot_path();
  void set_allocated_robot_path(::robot_data::RobotPath* robot_path);
  private:
  const ::robot_data::RobotPath& _internal_robot_path() const;
  ::robot_data::RobotPath* _internal_mutable_robot_path();
  public:
  void unsafe_arena_set_allocated_robot_path(
      ::robot_data::RobotPath* robot_path);
  ::robot_data::RobotPath* unsafe_arena_release_robot_path();

  void clear_Item();
  ItemCase Item_case() const;
  // @@protoc_insertion_point(class_scope:robot_data.RobotData)
 private:
  class _Internal;
  void set_has_laser_data();
  void set_has_robot_path();

  inline bool has_Item() const;
  inline void clear_has_Item();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ItemUnion {
    constexpr ItemUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::robot_data::LaserData* laser_data_;
    ::robot_data::RobotPath* robot_path_;
  } Item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_robotdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:robot_data.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:robot_data.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:robot_data.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:robot_data.Point.y)
}

// double theta = 3;
inline void Point::clear_theta() {
  theta_ = 0;
}
inline double Point::_internal_theta() const {
  return theta_;
}
inline double Point::theta() const {
  // @@protoc_insertion_point(field_get:robot_data.Point.theta)
  return _internal_theta();
}
inline void Point::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Point::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:robot_data.Point.theta)
}

// -------------------------------------------------------------------

// LaserData

// sint32 location = 1;
inline void LaserData::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaserData::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LaserData::location() const {
  // @@protoc_insertion_point(field_get:robot_data.LaserData.location)
  return _internal_location();
}
inline void LaserData::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void LaserData::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:robot_data.LaserData.location)
}

// int64 timeStamp = 2;
inline void LaserData::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaserData::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaserData::timestamp() const {
  // @@protoc_insertion_point(field_get:robot_data.LaserData.timeStamp)
  return _internal_timestamp();
}
inline void LaserData::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void LaserData::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:robot_data.LaserData.timeStamp)
}

// repeated .robot_data.Point scan = 3;
inline int LaserData::_internal_scan_size() const {
  return scan_.size();
}
inline int LaserData::scan_size() const {
  return _internal_scan_size();
}
inline void LaserData::clear_scan() {
  scan_.Clear();
}
inline ::robot_data::Point* LaserData::mutable_scan(int index) {
  // @@protoc_insertion_point(field_mutable:robot_data.LaserData.scan)
  return scan_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >*
LaserData::mutable_scan() {
  // @@protoc_insertion_point(field_mutable_list:robot_data.LaserData.scan)
  return &scan_;
}
inline const ::robot_data::Point& LaserData::_internal_scan(int index) const {
  return scan_.Get(index);
}
inline const ::robot_data::Point& LaserData::scan(int index) const {
  // @@protoc_insertion_point(field_get:robot_data.LaserData.scan)
  return _internal_scan(index);
}
inline ::robot_data::Point* LaserData::_internal_add_scan() {
  return scan_.Add();
}
inline ::robot_data::Point* LaserData::add_scan() {
  ::robot_data::Point* _add = _internal_add_scan();
  // @@protoc_insertion_point(field_add:robot_data.LaserData.scan)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >&
LaserData::scan() const {
  // @@protoc_insertion_point(field_list:robot_data.LaserData.scan)
  return scan_;
}

// -------------------------------------------------------------------

// RobotPath

// sint32 location = 1;
inline void RobotPath::clear_location() {
  location_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotPath::_internal_location() const {
  return location_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RobotPath::location() const {
  // @@protoc_insertion_point(field_get:robot_data.RobotPath.location)
  return _internal_location();
}
inline void RobotPath::_internal_set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  location_ = value;
}
inline void RobotPath::set_location(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:robot_data.RobotPath.location)
}

// int64 timeStamp = 2;
inline void RobotPath::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotPath::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RobotPath::timestamp() const {
  // @@protoc_insertion_point(field_get:robot_data.RobotPath.timeStamp)
  return _internal_timestamp();
}
inline void RobotPath::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RobotPath::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:robot_data.RobotPath.timeStamp)
}

// repeated .robot_data.Point path = 3;
inline int RobotPath::_internal_path_size() const {
  return path_.size();
}
inline int RobotPath::path_size() const {
  return _internal_path_size();
}
inline void RobotPath::clear_path() {
  path_.Clear();
}
inline ::robot_data::Point* RobotPath::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:robot_data.RobotPath.path)
  return path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >*
RobotPath::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:robot_data.RobotPath.path)
  return &path_;
}
inline const ::robot_data::Point& RobotPath::_internal_path(int index) const {
  return path_.Get(index);
}
inline const ::robot_data::Point& RobotPath::path(int index) const {
  // @@protoc_insertion_point(field_get:robot_data.RobotPath.path)
  return _internal_path(index);
}
inline ::robot_data::Point* RobotPath::_internal_add_path() {
  return path_.Add();
}
inline ::robot_data::Point* RobotPath::add_path() {
  ::robot_data::Point* _add = _internal_add_path();
  // @@protoc_insertion_point(field_add:robot_data.RobotPath.path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::robot_data::Point >&
RobotPath::path() const {
  // @@protoc_insertion_point(field_list:robot_data.RobotPath.path)
  return path_;
}

// -------------------------------------------------------------------

// RobotData

// .robot_data.LaserData laser_data = 1;
inline bool RobotData::_internal_has_laser_data() const {
  return Item_case() == kLaserData;
}
inline bool RobotData::has_laser_data() const {
  return _internal_has_laser_data();
}
inline void RobotData::set_has_laser_data() {
  _oneof_case_[0] = kLaserData;
}
inline void RobotData::clear_laser_data() {
  if (_internal_has_laser_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Item_.laser_data_;
    }
    clear_has_Item();
  }
}
inline ::robot_data::LaserData* RobotData::release_laser_data() {
  // @@protoc_insertion_point(field_release:robot_data.RobotData.laser_data)
  if (_internal_has_laser_data()) {
    clear_has_Item();
      ::robot_data::LaserData* temp = Item_.laser_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Item_.laser_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_data::LaserData& RobotData::_internal_laser_data() const {
  return _internal_has_laser_data()
      ? *Item_.laser_data_
      : reinterpret_cast< ::robot_data::LaserData&>(::robot_data::_LaserData_default_instance_);
}
inline const ::robot_data::LaserData& RobotData::laser_data() const {
  // @@protoc_insertion_point(field_get:robot_data.RobotData.laser_data)
  return _internal_laser_data();
}
inline ::robot_data::LaserData* RobotData::unsafe_arena_release_laser_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_data.RobotData.laser_data)
  if (_internal_has_laser_data()) {
    clear_has_Item();
    ::robot_data::LaserData* temp = Item_.laser_data_;
    Item_.laser_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RobotData::unsafe_arena_set_allocated_laser_data(::robot_data::LaserData* laser_data) {
  clear_Item();
  if (laser_data) {
    set_has_laser_data();
    Item_.laser_data_ = laser_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_data.RobotData.laser_data)
}
inline ::robot_data::LaserData* RobotData::_internal_mutable_laser_data() {
  if (!_internal_has_laser_data()) {
    clear_Item();
    set_has_laser_data();
    Item_.laser_data_ = CreateMaybeMessage< ::robot_data::LaserData >(GetArenaForAllocation());
  }
  return Item_.laser_data_;
}
inline ::robot_data::LaserData* RobotData::mutable_laser_data() {
  ::robot_data::LaserData* _msg = _internal_mutable_laser_data();
  // @@protoc_insertion_point(field_mutable:robot_data.RobotData.laser_data)
  return _msg;
}

// .robot_data.RobotPath robot_path = 2;
inline bool RobotData::_internal_has_robot_path() const {
  return Item_case() == kRobotPath;
}
inline bool RobotData::has_robot_path() const {
  return _internal_has_robot_path();
}
inline void RobotData::set_has_robot_path() {
  _oneof_case_[0] = kRobotPath;
}
inline void RobotData::clear_robot_path() {
  if (_internal_has_robot_path()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Item_.robot_path_;
    }
    clear_has_Item();
  }
}
inline ::robot_data::RobotPath* RobotData::release_robot_path() {
  // @@protoc_insertion_point(field_release:robot_data.RobotData.robot_path)
  if (_internal_has_robot_path()) {
    clear_has_Item();
      ::robot_data::RobotPath* temp = Item_.robot_path_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Item_.robot_path_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::robot_data::RobotPath& RobotData::_internal_robot_path() const {
  return _internal_has_robot_path()
      ? *Item_.robot_path_
      : reinterpret_cast< ::robot_data::RobotPath&>(::robot_data::_RobotPath_default_instance_);
}
inline const ::robot_data::RobotPath& RobotData::robot_path() const {
  // @@protoc_insertion_point(field_get:robot_data.RobotData.robot_path)
  return _internal_robot_path();
}
inline ::robot_data::RobotPath* RobotData::unsafe_arena_release_robot_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:robot_data.RobotData.robot_path)
  if (_internal_has_robot_path()) {
    clear_has_Item();
    ::robot_data::RobotPath* temp = Item_.robot_path_;
    Item_.robot_path_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RobotData::unsafe_arena_set_allocated_robot_path(::robot_data::RobotPath* robot_path) {
  clear_Item();
  if (robot_path) {
    set_has_robot_path();
    Item_.robot_path_ = robot_path;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:robot_data.RobotData.robot_path)
}
inline ::robot_data::RobotPath* RobotData::_internal_mutable_robot_path() {
  if (!_internal_has_robot_path()) {
    clear_Item();
    set_has_robot_path();
    Item_.robot_path_ = CreateMaybeMessage< ::robot_data::RobotPath >(GetArenaForAllocation());
  }
  return Item_.robot_path_;
}
inline ::robot_data::RobotPath* RobotData::mutable_robot_path() {
  ::robot_data::RobotPath* _msg = _internal_mutable_robot_path();
  // @@protoc_insertion_point(field_mutable:robot_data.RobotData.robot_path)
  return _msg;
}

inline bool RobotData::has_Item() const {
  return Item_case() != ITEM_NOT_SET;
}
inline void RobotData::clear_has_Item() {
  _oneof_case_[0] = ITEM_NOT_SET;
}
inline RobotData::ItemCase RobotData::Item_case() const {
  return RobotData::ItemCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robot_data

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robotdata_2eproto
